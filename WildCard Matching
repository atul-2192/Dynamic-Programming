QUESTION LINK: https://leetcode.com/problems/wildcard-matching/description/ 
Memoization:

int f(int i,int j,string &s,string &p,vector<vector<int>>&dp)
    {
        if(i==0&&j==0) return 1;
        if(i==0&&j>0)
        {
            for(int ind=0;ind<j;ind++)
            {
                if(p[ind]!='*') return 0;
            }
            return 1;
        }
        if(j==0&&i>0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[i-1]==p[j-1]||p[j-1]=='?')
        {
            return dp[i][j]=f(i-1,j-1,s,p,dp);
        }
        if(p[j-1]=='*')
        {
            return dp[i][j]=f(i-1,j,s,p,dp)||f(i,j-1,s,p,dp);
        }
        return 0;
    }
    bool isMatch(string s, string p) {
        int  n=s.length();
        int m=p.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return f(n,m,s,p,dp);
    }
    
TABULATION:

 bool isMatch(string s, string p) {
        int  n=s.length();
        int m=p.length();
        vector<vector<bool>>dp(n+1,vector<bool>(m+1,false));
        dp[0][0]=true;
       for(int i=1;i<=m;i++)
       {    bool flag=true;
              for(int ind=0;ind<i;ind++)
            {
                if(p[ind]!='*') 
                {
                    flag=false;
                    break;
                }
            }
            dp[0][i]=flag;
       }
            for(int i=1;i<=n;i++)
            {
                dp[i][0]=false;
            }
       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=m;j++)
           {
                 if(s[i-1]==p[j-1] || p[j-1]=='?')
                {
                    dp[i][j]= dp[i-1][j-1];
                }
                else if(p[j-1]=='*')
                {
                    dp[i][j]= dp[i-1][j] || dp[i][j-1];
                }
                else{
                    dp[i][j]=false;
                }


           }
       }
       return dp[n][m];
    }
    
SPACE OPTIMISED:

    bool isMatch(string s, string p) {
        int n=s.length();
        int m=p.length();
        vector<bool>dp(m+1,false);
        dp[0]=true;
         for(int i=1;i<=m;i++)
         {    bool flag=true;
              for(int ind=0;ind<i;ind++)
            {
                if(p[ind]!='*') 
                {
                    flag=false;
                    break;
                }
            }
              dp[i]=flag;
          }
          
       for(int i=1;i<=n;i++)
       {   vector<bool>prev(m+1,false);
           for(int j=1;j<=m;j++)
           {
                 if(s[i-1]==p[j-1] || p[j-1]=='?')
                {
                    prev[j]= dp[j-1];
                }
                else if(p[j-1]=='*')
                {
                    prev[j]= dp[j] || prev[j-1];
                }
                else{
                    prev[j]=false;
                }


           }
           dp=prev;
       }
       return dp[m];
    }











